{% for type in types.implementing.Retrofire %}
import Alamofire
import RetrofireSwift

extension SessionManager {

	{% for method in type.allMethods %}
	func {{ method.callName }}(
		{% for param in method.parameters %}
		{{ param.name }}: {{ param.typeName }},
		{% endfor %}
		{% if method.unwrappedReturnTypeName != "Void" and method.unwrappedReturnTypeName != "" %}
		_ completion: @escaping ({{ method.unwrappedReturnTypeName }}?, RetrofireError?) -> Void
		{% else %}
		_ completion: @escaping (Int?, RetrofireError?) -> Void
		{% endif %}
	){

		{% for k, v in method.annotations %}
		{% if k == "GET" or k == "POST" or k == "PUT" or k == "PATCH" or k == "DELETE" %}
		let method: HTTPMethod = .{{ k|lowercase }}
		{% if method.parameters|annotated:"Url"|count == 1 %}
		{% for param in method.parameters|annotated:"Url" %}
		let url = {{ param.name }}
		{% endfor %}
		{% else %}
		let url = {% if method.annotations.baseUrl %}"${{ method.annotations.baseUrl }}{{ v }}"{% else %} "\(RetrofireConfig.fullUrl){{ v }}"
		{% endif %}
		{% endif %}
		{% endif %}
		{% endfor %}
		{% for param in method.parameters|annotated:"Path" %}
			.replacePathParameter(path: "{% if param.annotations.Path != 1 %}{{ param.annotations.Path }}{% else %}{{ param.name }}{% endif %}", variable: {{ param.name }})
		{% endfor %}
		var urlComponent = URLComponents(string: url)!
		{% if method.parameters|annotated:"Query"|count > 0 %}
		var queryStringParam: [String:String] = [:]
		{% for param in method.parameters|annotated:"Query" %}
		queryStringParam["{% if param.annotations.Query != 1 %}{{ param.annotations.Query }}{% else %}{{ param.name }}{% endif %}"] = {{ param.name }}
		{% endfor %}
		let queryItems = queryStringParam.map  { URLQueryItem(name: $0.key, value: $0.value) }
		urlComponent.queryItems = queryItems
		{% endif %}

		var request = try! URLRequest(url: urlComponent.url!, method: method)
		
		{% if method.parameters|annotated:"Header"|count > 0 or method.parameters|annotated:"Body"|count > 0 %}
		var headers: [String: String] = [:]
		request.allHTTPHeaderFields?.forEach { headers[$0.key] = $0.value }

		{% for param in method.parameters|annotated:"Body" %}
		let body = try! JSONEncoder().encode({{ param.name }})
		headers["Content-Type"] = "application/json"
		request.httpMethod = "POST"
		request.httpBody = body
		{% endfor %}

		{% for param in method.parameters|annotated:"Header" %}
		headers["{{ param.annotations.Header }}"] = {{ param.name }}
		{% endfor %}

		request.allHTTPHeaderFields = headers
		
		{% endif %}

		{% if method.unwrappedReturnTypeName == "Void" or method.unwrappedReturnTypeName == "" %}
		self.request(request)
			.validate(statusCode: 200..<300)
			.responseData { response in
				guard response.result.isSuccess else {
					completion(response.response?.statusCode, .server(text: String(describing: response.result.error)))
					return
				}
				completion(response.response?.statusCode, nil)
			}
		{% elif not method.annotations.responseType or method.annotations.responseType == "json" %}
		self.request(request)
			.validate(statusCode: 200..<300)
			.validate(contentType: ["application/json"])
			.responseJSON { response in
				guard response.result.isSuccess else {
					completion(nil, .server(text: String(describing: response.result.error)))
					return
				}
				if let data = response.data {
					if let jsonObj = try? JSONDecoder().decode({{ method.unwrappedReturnTypeName }}.self, from: data){
						completion(jsonObj, nil)
					} else {
						completion(nil, .unparsableJson)
					}
				} else {
					completion(nil, .emptyResponse)
				}
			}
		{% else %}

		self.request(request)
			.validate(statusCode: 200..<300)
			.response{{ method.annotations.responseType|capitalize }} { response in
				guard response.result.isSuccess else {
					completion(nil, .server(text: String(describing: response.result.error)))
					return
				}
				
				if let data = response.data {
					completion(data, nil)
				} else {
					completion(nil, .emptyResponse)
				}
				return
		}
		{% endif %}
	}
	{% endfor %}
}
{% endfor %}
